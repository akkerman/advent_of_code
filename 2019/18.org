:PROPERTIES:
:ID:       ac161594-939d-47bd-a54b-37d764d266d1
:END:
#+title: 2019 Day 18: Many-Worlds Interpretation
#+filetags: :python:

- tags :: [[id:e28a8549-79c6-4060-83a2-a6bcbe0bb09f][aoc2019]]

* Part One

Okay dus alle sleutels pakken, maar niet het kortste pad tussen alle sleutels
want je komt soms voor een gesloten deur.


Stel dat we een pad gaan zoeken dan is bijhouden waar we geweest zijn
nietvoldoende, want sommige paden leiden tot een dichte deur terwijl als je
daarvooreerst een anderpad zou hebben gelopen je er wel langs kan (want dan heb
je desleutel).  Waar ik nu aan denk is om een visited state te hebben NIET
alleen op coordinaat maar inclusief de verzamelde / geopende deuren.

Ik heb nu een implementatie die bijna 30s kost om de 5 voorbeelden te testen met een goed resultaat.
Benieuwd hoelang de echter input dan gaat duren.
Waar zit de optimalisatie?

Als ik geen tuples meer gebruik maar een frozenset dan duurt de test nog 16s.

Een frozenset, in tegenstelling tot een gewone set, is wel hashable dus kan ik
deze direct in de visited set stoppen zonder heen en weer te vertalen tussen set
en tuple.

Okay waar ik geen rekening mee gehouden heb is dat het mogelijk is dat een punt,
met dezelfde sleutels, al meerdere keren in de queue kan staan voordat deze voor
de eerste keer bezocht wordt. Daarom dus altijd na het poppen controleren!

Tests duren nu ongeveer een halve seconde en werkelijke input ~10s.


* Part Two
