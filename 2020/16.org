#+title: Day 16: Ticket Translation
#+options: toc:nil num:nil

* Part one
A lot of parsing and iterating today.


#+begin_src python -n 1 :exports both :results value code
from itertools import chain
lines = ['class: 1-3 or 5-7', 'row: 6-11 or 33-44', 'seat: 13-40 or 45-50']
fields = {}

for line in lines:
    field, ranges = line.split(': ')
    ranges = ranges.split(' or ')
    start0, end0 = ranges[0].split('-')
    start1, end1 = ranges[1].split('-')

    fields[field] = list(chain(
            range(int(start0), int(end0) + 1),
            range(int(start1), int(end1) + 1)
            ))

return fields
#+end_src

#+RESULTS:
#+begin_src python
{'class': [1, 2, 3, 5, 6, 7], 'row': [6, 7, 8, 9, 10, 11, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], 'seat': [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50]}
#+end_src


Check, for each value in each ticket if it matches any of the given ranges. If
it does not match *any* of the ranges then it is a value we were looking for and
add it to a total.

* Part Two

The steps for part two are as follows.

Go through all ranges, if a specific index of all valid tickets matches a range, mark this index as a candidate for that field.
This results in a dictionary with fieldname as key and candidate indices as value. For the example this would be:

The idea now is to isolate the fields where there is only one candidate and
remove this candidate from all *other* fields (if present). Repeat until all
fields have exactly one candidate.

#+begin_src python export: code
while True:
    length_one = [lst[0] for lst in candidates.values() if len(lst) == 1]
    if len(length_one) == len(candidates):
        break
    for num in set(length_one):
        for c in candidates.values():
            if num in c and len(c) > 1:
                c.remove(num)
#+end_src
