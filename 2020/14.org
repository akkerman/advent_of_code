#+title: Day 14: Docking Data
#+options: toc:nil num:nil

* Part One
For me the first challenge here was to figure out how to translate an int to a string of bits.
Aparently this is easily done with string formatting in python

#+begin_src python :exports both
num = 47
return f"{num:36b}"
#+end_src

#+RESULTS:
: 101111

I modelled the memory as a dictionary and just used the input =mem[55081]= as
  the key, so no difficult parsing nor a very long array.

Applying the mask is simply going through all positions and applying the provided logic:

#+begin_src python :exports both :results verbatim
value = "000000000000000000000000000000001011"  # (decimal 11)
mask  = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X"

result = ""
for m, v in zip(mask, value):
    if m == 'X':
        result += v
    else:
        result += m

return result
#+end_src

#+RESULTS:
: 000000000000000000000000000001001001

Or with list comprehension:
#+begin_src python :exports both :results verbatim
value = "000000000000000000000000000000001011"  # (decimal 11)
mask  = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X"
masked = [y if x == 'X' else x for x, y in zip(mask, value)]
return  "".join(masked)
#+end_src

#+RESULTS:
: 000000000000000000000000000001001001


* Part Two
