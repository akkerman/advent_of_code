#+title: Day 18: Operation Order

* Part One

Let's ignore parantheses for a moment, a calculation without *operator
  precedence*, can be calculated by keeping a running total and applying the
  next operator to the next number. It's nice that python has an eval funtion
  which can do the actual calculation.

#+begin_src python :exports both
from collections import deque
expression = "1 + 2 * 3 + 4 * 5 + 6".split(' ')
expression = deque(expression)

operator = ''
total = ''
while expression:
    part = expression.popleft()
    match part:
        case '*' | '+':
            operator = part
        case _ :
            if operator:
                total = str(eval(total + operator + part))
            else:
                total = part
return total
#+end_src

#+RESULTS:
: 71

Adding parenteses is like doing a sub-calculation. A sub-calculation can be
  implemented by a recursive call to the above calculation. We need to add two
  new cases.

#+begin_src python
case '(':
    intermediate = calculate(expression)
    # put intermediate result back into deque for further processing
    expression.appendleft(intermediate)  
case ')':
    return result
#+end_src

* Part Two

Now addition takes precedence over multiplication. Another way of saying this
  is, always do addition, only do multiplication when there is no other choice.

And thus we start a new sub-calculation as soon as we encounter an asterisk.

#+begin_src python
case '*':
    operator = part
    intermediate = calculate2(expression)
    # put intermediate result back into deque for further processing
    expression.appendleft(intermediate)
#+end_src

This approach did give a lot of correct answers but I ran into a bug. When
  encounering a closing parentesis while in the sub-calculation for
  multiplication the sub-calculation for parenteses did not terminate
  correctly. A fix was to make the sub-calculation aware that is is calculating
  paranteses or not, if not the parentesis should be added to the deque.


#+begin_src python
    case '(':
        intermediate = calculate2(expression, '(')
        expression.appendleft(intermediate)
    case ')':
        if prev != '(':
            # re-add closing parentesis when not processing parenteses
            expression.appendleft(')')
        return result
#+end_src
