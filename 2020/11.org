:PROPERTIES:
:ID:       2ad11f1b-505f-4647-b377-a7832a1559b4
:END:
#+title: 2020 Day 11: Seating System
#+options: toc:nil num:nil


- tags :: [[id:5b20c534-bad7-4ba2-bcfe-68c39a6f7f1b][aoc2020]]
* Part One

I wanted to solve this using set operations. imo it turns out to be extremely expressive and more or less a direct translation from english.
The idea is to have a set of all seats and a set of occupied seats. (a seat becoming empty is to remove it from occupied)

#+begin_src python
for seat in seats:
    possible_seats = seats & adjacent_seats(seat)

    if seat in occupied:
        if len(possible_seats & occupied) >= 4:
            new_occupied.remove(seat)
    else:
        free_seats = possible_seats - occupied
        if free_seats == possible_seats:
            new_occupied.add(seat)
#+end_src


+ =seats= :: translation of the input to coordinates, all seats (no floor, either empty or occupied)
+ ~occupied~ :: positions of all currently occupied seats (starts out empty)
+ ~new_occupied~ :: positions of all occupied seats after applying the rules (start out the same as ~occupied~)
+ =adjacent_seats= :: one of the eight positions immediately up, down, left right, or diagonal from the seat
+ =possible_seats= :: set cross section of all seats and adjacent_seats, making sure the floor parts in ~adjacent_seats~ get removed
+ ~free_seats~ :: set difference of ~possible_seats~ and ~occupied~ seats, making sure the occupied seats in ~adjacent_seats~ get removed

* Part Two

The second part is the same algorithm as the first part with two differences.

1. the threshold of 4 is now 5 and
2. the caluculation of ~adjacent_seats~ becomes ~visible_seats~.

If we put that in a solve function with this signature:

#+begin_src python
def solve(seats, get_neigbouring_seats, tolerance):
#+end_src


+ =seats= :: translation of the input to coordinates, all seats (no floor, either empty or occupied)
+ ~get_neigbouring_seats~ :: a function accepting a seat and returning a set of seats around this seat (either ~adjacent_seats~ or ~visible_seats~)
+ ~tolerance~ :: how many neigbouring seats must be occupied before a seat becomes empty (either 4 or 5).
