#+title: Day 6: Tuning Trouble
#+options: toc:nil num:nil

* Solve in Javascript

For some reason I could not get the correct answers, I was typing out all
conditions ~w === y && y === z~ etc..  Only after switching to a different strategy
~![x,y,z].includes(w)~ did I realise I started out checking for equality instead
of inequality.

** Part Two

Ok now it needs to be 14 chars instead of 3, that is going to be tedious to
write out. So I switched to using a ~Set~ and checking if the size of the set is
equal to length of the original list, trusting that ~Set~ would remove duplicates.

This also did NOT work properly at first, I was doing:

#+begin_src javascript
const list = stream.slice(i, i + 14)
const set = new Set(list)
#+end_src

Which seems ok because I also did ~[w,x,y,z] = stream.slice(i, i + 4)~, but while
you can apparently destructure a string into an array, [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice][String.prototype.slice()]]
still returns a string so my Set contained just one string of 14 chars instead
of the 14 characters.

*Next time split it directly into an array again.*

** Generic

#+begin_src javascript
function findFirstSet (stream, size) {
  for (let i = 0; i < stream.length; i += 1) {
    const list = stream.slice(i, i + size)
    if (new Set(list).size === size) {
      return i + size
    }
  }
}
#+end_src

Caveat: dumps when there is no such set in the stream

* Haskell

For the Haskell version I went the 'one solution way'.
In a solution of [[https://github.com/iroghair/aoc2022/blob/main/Day06/day06.py#L20][iroghair]] I saw an optimization which got me intrigued.

In stead of walking through the characters one-by-one you can skip the amount of
duplicate characters instead. The idea is dat, although these duplicate could be
anywhere in the slice of the desired size, the most conservative guess would be
that they are all at the start of the slice. Thus it is safe to skip this amount
of characters.
