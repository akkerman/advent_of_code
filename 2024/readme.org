:PROPERTIES:
:ID:       212a04da-2f2f-42a8-aac3-6cc62a805688
:END:
#+title: AOC 2024

Dit zijn de oplossingen voor [[id:3b4d4e31-7340-4c89-a44d-df55e5d0a3d3][Advent of Code]] 2024.


* Goal

Dit jaar schrijf ik de oplossingen in [[id:126a1e03-1dcd-4fa3-80dd-59fd6e07ab56][Python]] en wil ga ik de code, na het oplossen, refactoren.

Bij de refactoring doe ik de volgende zaken

- voeg types toe
- schrijf pydoc comments die nog iets meer uitleggen wat een (hulp)functie doet
- vraag chatgpt om een alternatieve versie die wellicht meer pythonic is

* Lessons learned · spoiler free

** ~sum~ over generator

Zie [[id:7153c1e3-c016-46c3-8496-223545c1a19d][2024 Day 1: Historian Hysteria]].

#+caption: liever niet
#+begin_src python
def count_even(numbers:list[int]):
   count = 0
   for n in numbers:
      if n % 2 == 0:
         count += 1
   return count

return count_even([1,2,3,4,5,6,8,10])
#+end_src

#+RESULTS:
: 5

#+caption: liever wel
#+begin_src python
def count_even(numbers:list[int]):
   return sum(not e % 2 for e in numbers)

return count_even([1,2,3,4,5,6,8,10])
#+end_src

#+RESULTS:
: 5

** Gebruik ~any~ en ~all~

Zie [[id:71e660ab-fdfe-4e6b-8469-2b7acc36ceca][2024 Day 2: Red-Nosed Reports]]

controle of getallen gesorteerd zijn:

#+begin_src python
def is_sorted(numbers):
    return numbers == sorted(numbers)
return is_sorted([2,1,2,3,4,5,6,7,8,9])
#+end_src

#+RESULTS:
: False

Als dat een flinke lijst is en redelijk in het begin is het al duidelijk niet sorted dan heb je nu wel eerst de gehele lijst gesorteerd.

#+begin_src python
def is_sorted(numbers):
    return all(numbers[i] <= numbers[i+1] for i in range(len(numbers)-1))

return is_sorted([2,1,2,3,4,5,6,7,8,9])
#+end_src

#+RESULTS:
: False

---

Controle of er een paar gelijke getallen in een reeks zit
#+begin_src python
def contains_pair(numbers):
    for i in range(len(numbers)-1):
        if numbers[i] == numbers[i+1]:
            return True
    return False
return contains_pair([1,2,3,4,5,6,6,7,8,9])
#+end_src

#+RESULTS:
: True

Onderstaande is vrijwel helemaal gelijk maar je hebt geen expliciete ~True~ / ~False~ meer nodig.
#+begin_src python
def contains_pair(numbers):
    return any(numbers[i] == numbers[i+1] for i in range(len(numbers)-1))
return contains_pair([1,2,3,4,5,6,6,7,8,9])
#+end_src

#+RESULTS:
: True

** Typing Modernized

Vanaf Python 3.9 zijn de ingebouwde types (=list=, =tuple=, =dict=, etc.) rechtstreeks te gebruiken als typeparameters.
Dit maakt importeren van =typing=-module overbodig.

Oude stijl:
#+begin_src python
from typing import List, Tuple, Deque
from collections import deque, defaultdict

my_list: List[int] = [1, 2, 3]
my_tuple: Tuple[int, str] = (42, "hello")
my_deque: Deque[int] = deque([1, 2, 3])
my_defaultdict: DefaultDict[str, list[int]] = defaultdict(list)
#+end_src

Moderne Stijl (Python 3.9+)
#+begin_src python
from collections import deque, defaultdict

my_list: list[int] = [1, 2, 3]
my_tuple: tuple[int, str] = (42, "hello")
my_deque: deque[int] = deque([1, 2, 3])
my_defaultdict: defaultdict[str, list[int]] = defaultdict(list)
#+end_src

*** generic type alias

Het is blijkbaar ook mogelijk om de type annotation achterwege te laten en een
generic type direct in de instantiatie te stoppen.

#+begin_src python
from collections import deque, defaultdict

my_list = list[int]()
my_tuple = tuple[int, str](42, "hello")
my_deque = deque[int]deque([1, 2, 3])
my_defaultdict = defaultdict[str, list[int]](list)
#+end_src


** Invalid filename

Zie [[id:e11179d1-3728-44ad-9b5b-8276463ccb49][2024 Day 5: Print Queue]]

De bestandsnamen die ik gebruik zijn blijkbaar niet helemaal oké omdat het begint met een getal, dit geen geldige identifier is in python en ik dan issues krijg met import.

Zie evt [[https://docs.python.org/3/reference/import.html#the-import-system][5. The import system — Python 3.13.1 documentation]]

Bij dag 5 had ik het idee om wat tests te schrijven voor de functies omdat er m.i. zoveel voorwaarden waren.
Ik heb dat uiteindelijk gedaan door een apart bestand =util_05.py= te maken

Het blijkt dat je evt ook zo kan:

#+begin_src python
import importlib.util

spec = importlib.util.spec_from_file_location("module_name", "./05.py")
module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(module)
#+end_src

Anyhow, in later days I just put the tests in the same file!

** direct (anti)-clockwise calculation

Ik schreef altijd even een kleine dictionary om van de ene richting naar de andere te gaan.

#+CAPTION clockwise, start with going up
#+begin_src python
NEXT_DIR = {
    (-1, 0): (0, 1),
    (0, 1): (1, 0),
    (1, 0): (0, -1),
    (0, -1): (-1, 0),
}
#+end_src


#+CAPTION ani-clockwise, start with going up
#+begin_src python
NEXT_DIR = {
    (-1, 0): (0, -1),
    (0, -1): (1, 0),
    (1, 0): (0, 1),
    (0, 1): (-1, 0),
}
#+end_src

Soms zelfs een langere, om vanuit 1 richting zowel de linksom als rechtsom te krijgen:

#+CAPTION either way
#+begin_src python
NEXT_DIR = {
    (0, 1): [(1, 0), (-1, 0)],
    (1, 0): [(0, -1), (0, 1)],
    (0, -1): [(1, 0), (-1, 0)],
    (-1, 0): [(0, -1), (0, 1)],
}
#+end_src


Tijdens kijken van oplossingen op reddit en/of youtube:

#+begin_src python
dr, dc = direction
turn_right = (dc, -dr)
turn_left = (-dc, cr)
#+end_src

Kennis voor het eerst toegepast, na een refactor, in [[id:35b46482-e59a-4ea0-915b-b90ffe20d2e7][2024 Day 16: Reindeer Maze]]

** Delen door een 2-macht is equivalent aan bitshifting

Als je deelt door een macht van twee an afrond naar een integer blijkt dit hetzelfde te zijn als het originele getal te shiften met de macht.

#+begin_src python
getal = 12345
macht = 6

a = getal // (2 ** macht)
b = getal >> macht

return a,b
#+end_src

#+RESULTS:
| 192 | 192 |


[[id:45000afd-9917-49e0-bb97-7d99d38cccde][2024 Day 17: Chronospatial Computer]]
