:PROPERTIES:
:ID:       547ac2fd-713f-414a-b9f2-b7cbffa704ce
:END:
#+title: 2024 Day 6: Guard Gallivant
#+filetags: :python:
- tags :: [[id:3b4d4e31-7340-4c89-a44d-df55e5d0a3d3][aoc]]

* Part One
- references :: [[id:c7a60304-c46f-411c-97e6-36b763d5c49a][2024 Day 4: Ceres Search]]  Â· [[id:9cf92889-b2ff-453d-9ff1-34e254876ef8][2018 Day 5: Alchemical Reduction]]

  Don't update the map, track unique positions.
  Don't walk the map, use the obstructions to restrict guard movement.
  Don't move the guard, check it's position first.
  In each iteration there is one of two movements -> take a step and turn around

* Part Two
- references :: [[id:96520f57-d815-4f21-874c-24ea3a7a1906][2018 Day 4: Repose Record]]

Dus moet rechthoeken vinden in een grid waarvan alle punten van de rechthoek
NIET In de grid zitten maar beperkt zijn door die obstakels.

Ik kan alle obstakels afgaan en zoeken naar een obstakel dat er schuin tegenoverligt.
Als ik dan ook de andere hoeken kan vinden heb ik een mogelijk vierkantje.

Toen ik bovenstaande deed had ik te weinig mogelijke punten.
De remedie is, niet alleen naar de main diagonal zoeken maar ook de anti diagonal.

Vind ik dan dubbelen? Niet heel boeiend, ik stop ze in een set.
Nu vind ik meer (8 vanuit het voorbeeld.) Het issue is dat die de guard nooit
bij die twee extra punten komt.

Mijn eerste gedachte is nu dat ik dan alle punten weg haal waar de guard nooit gelopen heeft, maar dan heb ik weer te weinig (5).

Het blijkt dat optie 5, vanuit het voorbeeold, helemaal geen rechthoek is maar twee overlappende rechthoeken.
Daar had ik ff geen rekening mee gehouden. En vind mijn algorithme helemaal nooit.
Achteraf wel stom, want optie 2 toont dit scenario al.


Wat nu als ik op alle plekken waar de guard in part one kwam een obstakel neer zet en controleer of deze in een loop geraakt. Om het iets minder brute force te doen, pas ik deel 1 aan zodat deze mij niet alleen alle unieke locatie geeft maar ook welke richting de guard had op die positie.

Het idee nu is.
- zet op een lokatie een obstakel
- bepaal HOE de guard hier kwam, dat zijn 1 of meer punten met richting die leiden tot dit punt
- voor elk van die punten, start een simulatie om kijken of er wel/geen loop is
- een loop is het nogmaals verkrijgen van de locatie/richting combinatie
- zodra de guard UIT het lab gaat is er geen loop


Ik had allemaal slimme dingen bedacht zoals op het path zetten en dan de guard ertgen aan laten lopen en vanaf dat moment kijken of er loops te vinden zijn maar dat geeft structureel een te hoog getal.

Uiteindelijk alle plaatsen waar de guard langs kwam een obstakel neergezet en vervolgens het de hele simulatie gedraait. Duurt bijna 3 minuten maar dan komt het juiste antwoord er iig uit!
