:PROPERTIES:
:ID:       11a0eaea-98da-4171-9384-ad54267536a0
:END:
#+title: 2023 Day 20: Pulse Propagation


- tags :: [[id:806c0d8b-70a0-49da-b417-9c75a2d52bbf][aoc2023]]
 · [[id:604461ec-828d-4085-8670-9df3ef2b191e][mermaid.js]] · [[id:c24f193e-a83b-4253-aba8-d5bef70a96c9][Math]]

* Part One

Dit soort dingen mag ik altijd heel graag.
Genereer, obv de tekst, een programma die alle regels precies zo afspeelt als aangegeven.

* Part Two

Geen idee hoe dit te programmeren.
Ik wilde eerst wel eens een beeld van het geheel en genereerde daarom maar een [[https://github.com/mermaid-js/mermaid/blob/develop/README.md][Mermaid diagram]].

Daaruit was redelijk eenvoudig te zien dat er 4 afzonderlijke netwerken van modules zijn die hun uitput voeren aan een specifieke node. En elk van die 4 nodes waren input voor ~&zg~, een *conjunction*, dus pas als alle 4 de netwerken een *high* pulse geven krijgt ~rx~ een *low* pulse.


#+begin_src mermaid :file 20.png
graph TD

    fv((&fv))
    jd((&jd))
    lm((&lm))
    vm((&vm))
    zg((&zg))

    n1[[network 1]]
    n2[[network 2]]
    n3[[network 3]]
    n4[[network 4]]


    broadcaster --> n1
    broadcaster --> n2
    broadcaster --> n3
    broadcaster --> n4

    n1 --> fv
    n2 --> jd
    n3 --> lm
    n4 --> vm

    fv --> zg
    jd --> zg
    lm --> zg
    vm --> zg
    zg --> rx
#+end_src

#+RESULTS:
[[file:20.png]]


Mijn idee nu was om gewoon het netwerk af te spelen en bij te houden op welke
iteratie elk van die 4 nodes een *high* pulse geven en zodra ik bij elk dit twee
keer gezien heb heb ik een cycle en kan ik doorgaan met een berekening. Het
bleek overigens dat de cycles van elk van die netwerken begonnen bij 0 dus
hoef ik geen offset enzo uit te rekenen. Neem nu het kleinste gemene veelvoud van
die 4 en geef dat als antwoord.
